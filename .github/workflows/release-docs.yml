name: Release Docs

on:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: Release Docs
  cancel-in-progress: false

jobs:
  update_and_deploy_docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: get the current docs
        uses: actions/checkout@v3
        with:
          ref: gh-pages

      - name: Save old docs
        run: tar -cvf /tmp/old-docs.tar ./docs/generated

      - name: Checkout src
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          clean: false #  doesn't seem to work??

      - name: Restore old docs
        run: |
          mkdir -p ./docs/generated
          tar -xf /tmp/old-docs.tar ./docs/generated -C ./docs/generated

      - uses: ./.github/actions/prepare

      - name: Set PACKAGE_VERSION
        run: |
          temp_tag_version=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "PACKAGE_VERSION=${temp_tag_version//v}" >> $GITHUB_ENV

      - name: Set Version
        run: npm version --no-git-tag-version "$PACKAGE_VERSION"

      - name: Build
        run: pnpm run build

      - name: Build docs
        run: pnpm run docs

      - name: Save new docs
        run: tar -cvf /tmp/new-docs.tar ./docs/generated

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./docs/generated

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Update Coverage Badge
        run: cp ./docs/generated/v$PACKAGE_VERSION/coverage.svg ./docs/coverage.svg

      - id: coverage_changed
        run: echo "coverage_changed=$(git status --porcelain -u | grep -c docs/coverage.svg)" >> "$GITHUB_OUTPUT"

      - id: push_coverage
        env:
          COVERAGE_CHANGED: ${{ steps.coverage_changed.outputs.coverage_changed }}
          UP_TO_DATE: ${{ github.ref == 'refs/heads/main' }}
        run: echo "push_coverage=$(if [[ "$COVERAGE_CHANGED" != '0' && "$UP_TO_DATE" == "true" ]] ; then echo '1' ; else echo '0' ; fi)" >> "$GITHUB_OUTPUT"

      - if: steps.push_coverage.outputs.push_coverage != '0'
        run: |
          git add docs/coverage.svg
          git commit -m "docs: update documentation coverage"
          git push

      - name: get gh-pages
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          clean: false #  doesn't seem to work??

      - name: Restore new docs
        run: |
          rm -r ./docs/generated
          mkdir -p ./docs/generated
          tar -xf /tmp/new-docs.tar ./docs/generated -C ./docs/generated

      - name: Push new docs
        run: |
          git add -f docs/generated
          git commit -m "docs: update documentation"
          git push
        continue-on-error: true

      - name: Checkout src
        uses: actions/checkout@v3
