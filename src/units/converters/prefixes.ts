/**
 * @file Autogenerated File - Don't manually edit.
 */

import type { UnknownUnit, UnitConversionRate } from "../../core.ts";
import { mul, div } from "../../math.ts";
import type { Divide, Multiply } from "../../units-operations.ts";

/**
 * Convert `X` to `dekaX`.
 */
export function toDeka<T extends UnknownUnit>(value: T): Multiply<T, UnitConversionRate<{ scalar10: -1 }>> {
  return mul(value, 10 as UnitConversionRate<{ scalar10: -1 }>);
}

/**
 * Convert `dekaX` to `X`.
 */
export const fromDeka = toDeci;

/**
 * Convert `X` to `deciX`.
 */
export function toDeci<T extends UnknownUnit>(value: T): Divide<T, UnitConversionRate<{ scalar10: -1 }>> {
  return div(value, 10 as UnitConversionRate<{ scalar10: -1 }>);
}

/**
 * Convert `deciX` to `X`.
 */
export const fromDeci = toDeka;

/**
 * Convert `X` to `hectoX`.
 */
export function toHecto<T extends UnknownUnit>(value: T): Multiply<T, UnitConversionRate<{ scalar10: -2 }>> {
  return mul(value, 100 as UnitConversionRate<{ scalar10: -2 }>);
}

/**
 * Convert `hectoX` to `X`.
 */
export const fromHecto = toCenti;

/**
 * Convert `X` to `centiX`.
 */
export function toCenti<T extends UnknownUnit>(value: T): Divide<T, UnitConversionRate<{ scalar10: -2 }>> {
  return div(value, 100 as UnitConversionRate<{ scalar10: -2 }>);
}

/**
 * Convert `centiX` to `X`.
 */
export const fromCenti = toHecto;

/**
 * Convert `X` to `kiloX`.
 */
export function toKilo<T extends UnknownUnit>(value: T): Multiply<T, UnitConversionRate<{ scalar10: -3 }>> {
  return mul(value, 1000 as UnitConversionRate<{ scalar10: -3 }>);
}

/**
 * Convert `kiloX` to `X`.
 */
export const fromKilo = toMilli;

/**
 * Convert `X` to `milliX`.
 */
export function toMilli<T extends UnknownUnit>(value: T): Divide<T, UnitConversionRate<{ scalar10: -3 }>> {
  return div(value, 1000 as UnitConversionRate<{ scalar10: -3 }>);
}

/**
 * Convert `milliX` to `X`.
 */
export const fromMilli = toKilo;

/**
 * Convert `X` to `megaX`.
 */
export function toMega<T extends UnknownUnit>(value: T): Multiply<T, UnitConversionRate<{ scalar10: -6 }>> {
  return mul(value, 1000000 as UnitConversionRate<{ scalar10: -6 }>);
}

/**
 * Convert `megaX` to `X`.
 */
export const fromMega = toMicro;

/**
 * Convert `X` to `microX`.
 */
export function toMicro<T extends UnknownUnit>(value: T): Divide<T, UnitConversionRate<{ scalar10: -6 }>> {
  return div(value, 1000000 as UnitConversionRate<{ scalar10: -6 }>);
}

/**
 * Convert `microX` to `X`.
 */
export const fromMicro = toMega;

/**
 * Convert `X` to `gigaX`.
 */
export function toGiga<T extends UnknownUnit>(value: T): Multiply<T, UnitConversionRate<{ scalar10: -9 }>> {
  return mul(value, 1000000000 as UnitConversionRate<{ scalar10: -9 }>);
}

/**
 * Convert `gigaX` to `X`.
 */
export const fromGiga = toNano;

/**
 * Convert `X` to `nanoX`.
 */
export function toNano<T extends UnknownUnit>(value: T): Divide<T, UnitConversionRate<{ scalar10: -9 }>> {
  return div(value, 1000000000 as UnitConversionRate<{ scalar10: -9 }>);
}

/**
 * Convert `nanoX` to `X`.
 */
export const fromNano = toGiga;

/**
 * Convert `X` to `teraX`.
 */
export function toTera<T extends UnknownUnit>(value: T): Multiply<T, UnitConversionRate<{ scalar10: -12 }>> {
  return mul(value, 1000000000000 as UnitConversionRate<{ scalar10: -12 }>);
}

/**
 * Convert `teraX` to `X`.
 */
export const fromTera = toPico;

/**
 * Convert `X` to `picoX`.
 */
export function toPico<T extends UnknownUnit>(value: T): Divide<T, UnitConversionRate<{ scalar10: -12 }>> {
  return div(value, 1000000000000 as UnitConversionRate<{ scalar10: -12 }>);
}

/**
 * Convert `picoX` to `X`.
 */
export const fromPico = toTera;
